function [model,states] = BioGeoModel_Parpool(model,states,t,dt)
% BioGeoModel - Bio-Geochemical model
%
% Syntax:
%       [model,states] = BioGeoModel(model,states,t)
%
% Description:
%       This function conduct a batch model in each grid after a timestep.
%       The batch model is developed in IPHREEQC.
%
% Inputs:
%       - model : The rock-fluid-grid model created in MRST as an input
%       - states: The matrix contains solution after each time step
%       - t     : Number of step
%       - dt    : length of time step
%
% Outputs:
%       - model : The updated model after batch calculations
%       - states: The updated solution matrix after batch calculations
disp('Start of Bio-Geochemical Reactions...')
state = states{t,1};
G = model.G;
rock = model.rock;
Water = zeros(model.G.cells.num,1);
H2    = zeros(model.G.cells.num,1);
CO2   = zeros(model.G.cells.num,1);
CH4   = zeros(model.G.cells.num,1);
H2S   = zeros(model.G.cells.num,1);
N2    = zeros(model.G.cells.num,1);
%% Kinetic Data
%Methanogenesis
mu_MET = model.Kinetic.mu_MET;
b_MET  = model.Kinetic.b_MET;
Y_MET  = model.Kinetic.Y_MET;
K_Dmet = model.Kinetic.K_Dmet;
K_Amet = model.Kinetic.K_Amet;
MW_MET = model.Kinetic.MW_MET;
m_MET  = model.Kinetic.m_MET;
M0_MET = model.Kinetic.M0_MET;
Nmax_MET = model.Kinetic.Nmax_MET;
Mmax_MET = model.Kinetic.Mmax_MET;
Mmin_MET = model.Kinetic.Mmin_MET;
%Sulfate reduction
mu_SRB = model.Kinetic.mu_SRB;
b_SRB  = model.Kinetic.b_SRB;
Y_SRB  = model.Kinetic.Y_SRB;
K_Dsrb = model.Kinetic.K_Dsrb;
K_Asrb = model.Kinetic.K_Asrb;
MW_SRB = model.Kinetic.MW_SRB;
m_SRB  = model.Kinetic.m_SRB;
M0_SRB = model.Kinetic.M0_SRB;
Nmax_SRB = model.Kinetic.Nmax_SRB;
Mmax_SRB = model.Kinetic.Mmax_SRB;
Mmin_SRB = model.Kinetic.Mmin_SRB;
%Acetogenesis
mu_ACE = model.Kinetic.mu_ACE;
b_ACE  = model.Kinetic.b_ACE;
Y_ACE  = model.Kinetic.Y_ACE;
K_Dace = model.Kinetic.K_Dace;
K_Aace = model.Kinetic.K_Aace;
MW_ACE = model.Kinetic.MW_ACE;
m_ACE  = model.Kinetic.m_ACE;
M0_ACE = model.Kinetic.M0_ACE;
Nmax_ACE = model.Kinetic.Nmax_ACE;
Mmax_ACE = model.Kinetic.Mmax_ACE;
Mmin_ACE = model.Kinetic.Mmin_ACE;
%Iron reduction
mu_FRB = model.Kinetic.mu_FRB;
b_FRB  = model.Kinetic.b_FRB;
Y_FRB  = model.Kinetic.Y_FRB;
K_Dfrb = model.Kinetic.K_Dfrb;
K_Afrb = model.Kinetic.K_Afrb; %#ok<NASGU>
MW_FRB = model.Kinetic.MW_FRB;
m_FRB  = model.Kinetic.m_FRB;
M0_FRB = model.Kinetic.M0_FRB;
Nmax_FRB = model.Kinetic.Nmax_FRB;
Mmax_FRB = model.Kinetic.Mmax_FRB;
Mmin_FRB = model.Kinetic.Mmin_FRB;

if t==1
    states{1,1}.Solution.SRB_Biomass = repmat(M0_SRB,model.G.cells.num,1);
    states{1,1}.Solution.MET_Biomass = repmat(M0_MET,model.G.cells.num,1);
    states{1,1}.Solution.ACE_Biomass = repmat(M0_ACE,model.G.cells.num,1);
    states{1,1}.Solution.FRB_Biomass = repmat(M0_FRB,model.G.cells.num,1);
else
    states{t,1}.Solution.SRB_Biomass = states{t-1,1}.Solution.SRB_Biomass;
    states{t,1}.Solution.MET_Biomass = states{t-1,1}.Solution.MET_Biomass;
    states{t,1}.Solution.ACE_Biomass = states{t-1,1}.Solution.ACE_Biomass;
    states{t,1}.Solution.FRB_Biomass = states{t-1,1}.Solution.FRB_Biomass;
end
if t==1
    states{1,1}.Solution.Unit          = model.Solution.Unit;
    states{1,1}.Mineralogy.Calcite     = model.Mineralogy.Calcite;
    states{1,1}.Mineralogy.Dolomite    = model.Mineralogy.Dolomite;
    states{1,1}.Mineralogy.Anhydrite   = model.Mineralogy.Anhydrite;
    states{1,1}.Mineralogy.Quartz      = model.Mineralogy.Quartz;
    states{1,1}.Mineralogy.Goethite    = model.Mineralogy.Goethite;
    states{1,1}.Mineralogy.Brucite     = model.Mineralogy.Brucite;
    states{1,1}.Mineralogy.Portlandite = model.Mineralogy.Portlandite;
    states{1,1}.Mineralogy.Pyrite      = model.Mineralogy.Pyrite;
    states{1,1}.Mineralogy.Gypsum      = model.Mineralogy.Gypsum;
    states{1,1}.Solution.Ca            = model.Solution.Ca;
    states{1,1}.Solution.Cl            = model.Solution.Cl;
    states{1,1}.Solution.Na            = model.Solution.Na;
    states{1,1}.Solution.K             = model.Solution.K;
    states{1,1}.Solution.C4            = model.Solution.C4;
    states{1,1}.Solution.S6            = model.Solution.S6;
    states{1,1}.Solution.S2            = model.Solution.S2;
    states{1,1}.Solution.Fe3           = model.Solution.Fe3;
    states{1,1}.Solution.Mg            = model.Solution.Mg;
    states{1,1}.Solution.Fe2           = model.Solution.Fe2;
    states{1,1}.Solution.Si            = model.Solution.Si;
    states{1,1}.Solution.Acetate           = model.Solution.Acetate;
    states{1,1}.Solution.pH            = model.Solution.pH;
else
    states{t,1}.Solution.Unit          = 'mol/kgw';
    states{t,1}.Mineralogy.Calcite     = states{t-1,1}.Mineralogy.Calcite;
    states{t,1}.Mineralogy.Dolomite    = states{t-1,1}.Mineralogy.Dolomite;
    states{t,1}.Mineralogy.Anhydrite   = states{t-1,1}.Mineralogy.Anhydrite;
    states{t,1}.Mineralogy.Quartz      = states{t-1,1}.Mineralogy.Quartz;
    states{t,1}.Mineralogy.Goethite    = states{t-1,1}.Mineralogy.Goethite;
    states{t,1}.Mineralogy.Brucite     = states{t-1,1}.Mineralogy.Brucite;
    states{t,1}.Mineralogy.Portlandite = states{t-1,1}.Mineralogy.Portlandite;
    states{t,1}.Mineralogy.Pyrite      = states{t-1,1}.Mineralogy.Pyrite;
    states{t,1}.Mineralogy.Gypsum      = states{t-1,1}.Mineralogy.Gypsum;
    states{t,1}.Solution.Ca            = states{t-1,1}.Solution.Ca;
    states{t,1}.Solution.Cl            = states{t-1,1}.Solution.Cl;
    states{t,1}.Solution.Na            = states{t-1,1}.Solution.Na;
    states{t,1}.Solution.K             = states{t-1,1}.Solution.K;
    states{t,1}.Solution.C4            = states{t-1,1}.Solution.C4;
    states{t,1}.Solution.S6            = states{t-1,1}.Solution.S6;
    states{t,1}.Solution.S2            = states{t-1,1}.Solution.S2;
    states{t,1}.Solution.Fe3           = states{t-1,1}.Solution.Fe3;
    states{t,1}.Solution.Mg            = states{t-1,1}.Solution.Mg;
    states{t,1}.Solution.Fe2           = states{t-1,1}.Solution.Fe2;
    states{t,1}.Solution.Si            = states{t-1,1}.Solution.Si;
    states{t,1}.Solution.Acetate           = states{t-1,1}.Solution.Acetate;
    states{t,1}.Solution.pH            = states{t-1,1}.Solution.pH;
end

%% Mineralogy
V_Rock = deal(zeros(G.cells.num,1));
Quartz_Share = deal(zeros(G.cells.num,1));
Calcite_Share = deal(zeros(G.cells.num,1));
Dolomite_Share = deal(zeros(G.cells.num,1));
Anhydrite_Share = deal(zeros(G.cells.num,1));
Goethite_Share = deal(zeros(G.cells.num,1));
Portlandite_Share = deal(zeros(G.cells.num,1));
Pyrite_Share = deal(zeros(G.cells.num,1));
Brucite_Share = deal(zeros(G.cells.num,1));
Gypsum_Share = deal(zeros(G.cells.num,1));
rho_ave = deal(zeros(G.cells.num,1));
m_tot = deal(zeros(G.cells.num,1));
Quartz_i = deal(zeros(G.cells.num,1));
Calcite_i = deal(zeros(G.cells.num,1));
Dolomite_i = deal(zeros(G.cells.num,1));
Anhydrite_i = deal(zeros(G.cells.num,1));
Goethite_i = deal(zeros(G.cells.num,1));
Portlandite_i = deal(zeros(G.cells.num,1));
Pyrite_i = deal(zeros(G.cells.num,1));
Brucite_i = deal(zeros(G.cells.num,1));
Gypsum_i = deal(zeros(G.cells.num,1));
Quartz = deal(zeros(G.cells.num,1));
Calcite = deal(zeros(G.cells.num,1));
Dolomite = deal(zeros(G.cells.num,1));
Anhydrite = deal(zeros(G.cells.num,1));
Goethite = deal(zeros(G.cells.num,1));
Portlandite = deal(zeros(G.cells.num,1));
Pyrite = deal(zeros(G.cells.num,1));
Brucite = deal(zeros(G.cells.num,1));
Gypsum = deal(zeros(G.cells.num,1));

for i=1:G.cells.num
    V_Rock(i)          = (1-rock.poro(i))*model.G.cells.volumes(i);
    if t==1
        Quartz_Share(i)    = states{t,1}.Mineralogy.Quartz(i) * 0.01;  % weight precentage of Quartz
        Calcite_Share(i)   = states{t,1}.Mineralogy.Calcite(i) * 0.01;  % weight precentage of Calcite
        Dolomite_Share(i)  = states{t,1}.Mineralogy.Dolomite(i) * 0.01;  % weight precentage of Dolomite
        Anhydrite_Share(i) = states{t,1}.Mineralogy.Anhydrite(i) * 0.01; % weight precentage of Anhydrite
        Goethite_Share(i)  = states{t,1}.Mineralogy.Goethite(i) * 0.01; % weight precentage of Hematite
        Brucite_Share(i)   = states{t,1}.Mineralogy.Brucite(i) * 0.01; % weight precentage of Hematite
        Portlandite_Share(i)  = states{t,1}.Mineralogy.Portlandite(i) * 0.01; % weight precentage of Hematite
        Pyrite_Share(i)    = states{t,1}.Mineralogy.Pyrite(i) * 0.01; % weight precentage of Hematite
        Gypsum_Share(i)    = states{t,1}.Mineralogy.Gypsum(i) * 0.01; % weight precentage of Hematite
        A = Quartz_Share(i) + Calcite_Share(i) + Dolomite_Share(i) + Anhydrite_Share(i) + Goethite_Share(i) + Brucite_Share(i) + Portlandite_Share(i) + Pyrite_Share(i) + Gypsum_Share(i);
        B = Quartz_Share(i)./2.65 + Calcite_Share(i)./2.71 + Dolomite_Share(i)./2.84 + Anhydrite_Share(i)./2.97 + Goethite_Share(i)./4.26 + Brucite_Share(i)./2.40 + Pyrite_Share(i)./4.9 + Gypsum_Share(i)./2.39;
        rho_ave(i)  = (A)./(B); %g/cm^3
        m_tot(i)    = rho_ave(i) * V_Rock(i) * 1000; % total rock mass in gram
        Quartz_i(i)    = Quartz_Share(i)*m_tot(i)/60.083*1000;       %Initial Quartz Mole
        Calcite_i(i)   = Calcite_Share(i)*m_tot(i)/100.0869*1000;    %Initial Calcite Mole
        Dolomite_i(i)  = Dolomite_Share(i)*m_tot(i)/184.40*1000;     %Initial Dolomite Mole
        Anhydrite_i(i) = Anhydrite_Share(i)*m_tot(i)/136.14*1000;    %Initial Anhydrite Mole
        Goethite_i(i)  = Goethite_Share(i)*m_tot(i)/88.85*1000;      %Initial Goethite Mole
        Brucite_i(i)   = Brucite_Share(i)*m_tot(i)/58.32*1000;      %Initial Goethite Mole
        Portlandite_i(i)  = Portlandite_Share(i)*m_tot(i)/74.09*1000;      %Initial Goethite Mole
        Pyrite_i(i)    = Pyrite_Share(i)*m_tot(i)/119.98*1000;      %Initial Goethite Mole
        Gypsum_i(i)    = Gypsum_Share(i)*m_tot(i)/172.2*1000;      %Initial Goethite Mole
        states{t,1}.Mineralogy.Calcite(i)   = Calcite_i(i);
        states{t,1}.Mineralogy.Dolomite(i)  = Dolomite_i(i);
        states{t,1}.Mineralogy.Quartz(i)    = Quartz_i(i);
        states{t,1}.Mineralogy.Anhydrite(i) = Anhydrite_i(i);
        states{t,1}.Mineralogy.Goethite(i)  = Goethite_i(i);
        states{t,1}.Mineralogy.Brucite(i)   = Brucite_i(i);
        states{t,1}.Mineralogy.Portlandite(i)   = Portlandite_i(i);
        states{t,1}.Mineralogy.Pyrite(i)    = Pyrite_i(i);
        states{t,1}.Mineralogy.Gypsum(i)   = Gypsum_i(i);
    else
        Calcite_i(i)   = states{t-1,1}.Mineralogy.Calcite(i);
        Dolomite_i(i)  = states{t-1,1}.Mineralogy.Dolomite(i);
        Quartz_i(i)    = states{t-1,1}.Mineralogy.Quartz(i);
        Anhydrite_i(i) = states{t-1,1}.Mineralogy.Anhydrite(i);
        Goethite_i(i)  = states{t-1,1}.Mineralogy.Goethite(i);
        Brucite_i(i)   = states{t-1,1}.Mineralogy.Brucite(i);
        Portlandite_i(i)   = states{t-1,1}.Mineralogy.Portlandite(i);
        Pyrite_i(i)    = states{t-1,1}.Mineralogy.Pyrite(i);
        Gypsum_i(i)    = states{t-1,1}.Mineralogy.Gypsum(i);
    end
end


%% Mass Calculation
Water_Density           = states{t,1}.PVTProps.Density{1,1};
Gas_Density           = states{t,1}.PVTProps.Density{1,2};
X = states{t,1}.x;
Y = states{t,1}.y;
MW_Water              = X(:,1).*0.018015268 + X(:,2).*0.00201588 + X(:,3).*0.0440098 + X(:,4).*0.0160428 + X(:,5).*0.03408088 + X(:,6).*0.02801348;
MW_Gas                = Y(:,1).*0.018015268 + Y(:,2).*0.00201588 + Y(:,3).*0.0440098 + Y(:,4).*0.0160428 + Y(:,5).*0.03408088 + Y(:,6).*0.02801348;
rho_molar_Water       = Water_Density./MW_Water;
rho_molar_Gas         = Gas_Density./MW_Gas;
Sw = states{t,1}.s(:,1); 
indexw = Sw == 0; % Avoid Zero Water Volume/Mass
Sw(indexw) = 0.000001;
mass_H2O_Profile      = Sw.*model.G.cells.volumes.*model.rock.poro.*rho_molar_Water.*X(:,1).*0.018015268;
if t==1
    states{1,1}.Solution.SRB_Biomass = repmat(M0_SRB,model.G.cells.num,1)*mass_H2O_Profile(i);
    states{1,1}.Solution.MET_Biomass = repmat(M0_MET,model.G.cells.num,1)*mass_H2O_Profile(i);
    states{1,1}.Solution.ACE_Biomass = repmat(M0_ACE,model.G.cells.num,1)*mass_H2O_Profile(i);
    states{1,1}.Solution.FRB_Biomass = repmat(M0_FRB,model.G.cells.num,1)*mass_H2O_Profile(i);
end
mass_H2_Profile       = states{t,1}.FlowProps.ComponentTotalMass{2,1};
H2component_Profile   = states{t,1}.components(:,2);
mass_CO2_Profile      = states{t,1}.FlowProps.ComponentTotalMass{3,1};
CO2component_Profile  = states{t,1}.components(:,3);
mass_CH4_Profile      = states{t,1}.FlowProps.ComponentTotalMass{4,1};
CH4component_Profile  = states{t,1}.components(:,4);
mass_H2S_Profile      = states{t,1}.FlowProps.ComponentTotalMass{5,1};
H2Scomponent_Profile  = states{t,1}.components(:,5);
mass_N2_Profile       = states{t,1}.FlowProps.ComponentTotalMass{6,1};
N2component_Profile   = states{t,1}.components(:,6);
Sg                    = states{t,1}.s(:,2);
pH    = states{t,1}.Solution.pH;
Units = states{t,1}.Solution.Unit;
K        = states{t,1}.Solution.K;
Na       = states{t,1}.Solution.Na;
Mg       = states{t,1}.Solution.Mg;
Ca       = states{t,1}.Solution.Ca;
Cl       = states{t,1}.Solution.Cl;
C4       = states{t,1}.Solution.C4;
S6       = states{t,1}.Solution.S6;
S2       = states{t,1}.Solution.S2;
Fe3      = states{t,1}.Solution.Fe3;
Fe2      = states{t,1}.Solution.Fe2;
Si       = states{t,1}.Solution.Si;
Acetate  = states{t,1}.Solution.Acetate;

SRB_Biomass      = states{t,1}.Solution.SRB_Biomass;
MET_Biomass      = states{t,1}.Solution.MET_Biomass;
ACE_Biomass      = states{t,1}.Solution.ACE_Biomass;
FRB_Biomass      = states{t,1}.Solution.FRB_Biomass;
R                = 0.082057366080960; % Gas Constant atm.L/(mol.K)


index = H2component_Profile <=1e-8;
mass_H2_Profile(index) = 0;

index = CO2component_Profile <=1e-8;
mass_CO2_Profile(index) = 0;

index = CH4component_Profile <=1e-8;
mass_CH4_Profile(index) = 0;

index = H2Scomponent_Profile <=1e-8;
mass_H2S_Profile(index) = 0;

index = N2component_Profile <=10e-8; %Larger Tolerance
mass_N2_Profile(index) = 0;

mol_H2O_Profile       = mass_H2O_Profile/0.018015268000000; % %mole of H2O
mol_H2_Profile        = mass_H2_Profile/0.002015880000000;  % mole of H2
mol_CO2_Profile       = mass_CO2_Profile/0.044009800000000; % mole of CO2
mol_CH4_Profile       = mass_CH4_Profile/0.016042800000000; % mole of CH4
mol_H2S_Profile       = mass_H2S_Profile/0.034080880000000; % mole of H2S
mol_N2_Profile        = mass_N2_Profile/0.028013480000000;  % mole of N2

index = Sg == 0;
Sg(index) = 0.000001;  % Avoid Zero Gas Volume
Vg                    = model.G.cells.volumes.*Sg.*1000.*rock.poro;

pH2           = state.Z_V.*mol_H2_Profile.*R.*state.T./Vg;  %H2 Partial Pressure
pCO2          = state.Z_V.*mol_CO2_Profile.*R.*state.T./Vg; %CO2 Partial Pressure
pCH4          = state.Z_V.*mol_CH4_Profile.*R.*state.T./Vg; %CH4 Partial Pressure
pH2S          = state.Z_V.*mol_H2S_Profile.*R.*state.T./Vg; %H2S Partial Pressure
pN2           = state.Z_V.*mol_N2_Profile.*R.*state.T./Vg;  %N2 Partial Pressure
tot_time      = dt; % total time of simulation (seconds) = dt
steps         = model.BioGeoSteps;  % Number of steps for BioGeo simulation
pressure      = state.pressure./101325;
temp          = state.T;
OUTPUT = cell(G.cells.num,1);
%% Check Input mass (mole of each element)
InitialH  = mol_H2O_Profile*2 + mol_H2_Profile*2 + mol_H2S_Profile*2 + mol_CH4_Profile*4 + ...
    Gypsum_i*4 + Brucite_i*2 + Portlandite_i*2 + Goethite_i*1;
InitialO  = mol_H2O_Profile*1 + mol_CO2_Profile*2 + Calcite_i*3 + Dolomite_i*6 + Anhydrite_i*4 + ...
    Gypsum_i*6 + Brucite_i*2 + Portlandite_i*2 + Goethite_i*2;
InitialC  = mol_CO2_Profile*1 + mol_CH4_Profile*1 + Calcite_i*1 + Dolomite_i*2 + C4.*mass_H2O_Profile;
InitialS  = mol_H2S_Profile*1 + Anhydrite_i*1 + Gypsum_i*1 + Pyrite_i*2 + S6.*mass_H2O_Profile + S2.*mass_H2O_Profile;
InitialN  = mol_N2_Profile*2;
InitialCa = Calcite_i*1 + Dolomite_i*1 + Anhydrite_i*1 + Gypsum_i*1 + Portlandite_i*1+...
    Ca.*mass_H2O_Profile;
InitialMg = Dolomite_i*1 + Brucite_i*1 + Mg.*mass_H2O_Profile;
InitialFe = Pyrite_i*1 + Goethite_i*1 + Fe2.*mass_H2O_Profile + Fe3.*mass_H2O_Profile;


%%% H2O EVAP
%states = H2O_Evap(states,model,t);

%% Creating PHREEQC input for all cells
Strings = cell(G.cells.num,1);
for i=1:G.cells.num
    IPCstringCell= {'KNOBS',...
        '-iterations 800',...
        '-step_size 30',...
        '-convergence_tolerance 1e-10',...
        'RATES',...
        'MET',...
        '-start',...
        ['20 rate = ',num2str(mu_MET),'/86400/',num2str(Y_MET),'*kin("Biomass_MET")*mol("H2")/(',num2str(K_Dmet),'+mol("H2"))*tot("Carbonate(4)")/(',num2str(K_Amet),'+tot("Carbonate(4)"))'],...
        '30 if (TC<45) then rate = -rate * (TC-10)*(TC+10-2*45)/(45-10)^2',...
        '40 if (TC>=45) then rate = -rate * (TC-122)*(TC+122-2*45)/(45-122)^2',...
        '50 if (-LA("H+")<7.7) then rate = -rate * (-LA("H+")-4.1)*(-LA("H+")+4.1-2*7.7)/(7.7-4.1)^2',...
        '60 if (-LA("H+")>=7.7) then rate = -rate * (-LA("H+")-10.2)*(-LA("H+")+10.2-2*7.7)/(7.7-10.2)^2',...
        '70 if (-LA("H+")>=10.2) then rate = 0',...
        '80 if (-LA("H+")<=4.1) then rate = 0',...
        '90 if (TC<=10) then rate = 0',...
        '100 if (TC>=122) then rate = 0',...
        '101 TDS = (RHO - TOT("water")/SOLN_VOL)*1e3',...
        '102 if (TDS>=50) then rate = rate * (TDS-2*50+300)*(300-TDS)/(300-50)^2',...
        '103 if (TDS>300) then rate = 0',...
        '110 put(rate,1) ',...
        '120 moles = rate* TIME',...
        '200 SAVE moles',...
        '-end',...
        'SRB',...
        '-start',...
        ['20 rate = ',num2str(mu_SRB),'/86400/',num2str(Y_SRB),'*kin("Biomass_SRB")*mol("H2")/(',num2str(K_Dsrb),'+mol("H2"))*mol("SulfateO4-2")/(',num2str(K_Asrb),'+mol("SulfateO4-2"))'],...
        '30 if (TC<48) then rate = -rate * (TC-10)*(TC+10-2*48)/(48-10)^2',...
        '40 if (TC>=48) then rate = -rate * (TC-113)*(TC+113-2*48)/(48-113)^2',...
        '50 if (-LA("H+")<7.01) then rate = -rate * (-LA("H+")-1)*(-LA("H+")+1-2*7.01)/(7.01-1)^2',...
        '60 if (-LA("H+")>=7.01) then rate = -rate * (-LA("H+")-11.5)*(-LA("H+")+11.5-2*7.01)/(7.01-11.5)^2',...
        '70 if (-LA("H+")>=11.5) then rate = 0',...
        '80 if (-LA("H+")<=1) then rate = 0',...
        '90 if (TC<=10) then rate = 0',...
        '100 if (TC>=113) then rate = 0',...
        '101 TDS = (RHO - TOT("water")/SOLN_VOL)*1e3',...
        '102 if (TDS>=50) then rate = rate * (TDS-2*50+300)*(300-TDS)/(300-50)^2',...
        '103 if (TDS>300) then rate = 0',...
        '110 put(rate,2) ',...
        '120 moles = rate* TIME',...
        '200 SAVE moles',...
        '-end',...
        'ACE',...
        '-start',...
        ['20 rate = ',num2str(mu_ACE),'/86400/',num2str(Y_ACE),'*kin("Biomass_ACE")*mol("H2")/(',num2str(K_Dace),'+mol("H2"))*tot("Carbonate(4)")/(',num2str(K_Aace),'+tot("Carbonate(4)"))'],...
        '30 if (TC<38) then rate = -rate * (TC-25)*(TC+25-2*38)/(38-25)^2',...
        '40 if (TC>=38) then rate = -rate * (TC-72)*(TC+72-2*38)/(38-72)^2',...
        '50 if (-LA("H+")<7.04) then rate = -rate * (-LA("H+")-3.6)*(-LA("H+")+3.6-2*7.04)/(7.04-3.6)^2',...
        '60 if (-LA("H+")>=7.04) then rate = -rate * (-LA("H+")-9.5)*(-LA("H+")+9.5-2*7.04)/(7.04-9.5)^2',...
        '70 if (-LA("H+")>=9.5) then rate = 0',...
        '80 if (-LA("H+")<=3.6) then rate = 0',...
        '90 if (TC<=25) then rate = 0',...
        '100 if (TC>=72) then rate = 0',...
        '101 TDS = (RHO - TOT("water")/SOLN_VOL)*1e3',... % g/L
        '102 if (TDS>=50) then rate = rate * (TDS-2*50+300)*(300-TDS)/(300-50)^2',...
        '103 if (TDS>300) then rate = 0',...
        '110 put(rate,3) ',...
        '120 moles = rate* TIME',...
        '200 SAVE moles',...
        '-end',...
        'FRB',...
        '-start',...
        ['20 rate = ',num2str(mu_FRB),'/86400/',num2str(Y_FRB),'*kin("Biomass_FRB")*mol("H2")/(',num2str(K_Dfrb),'+mol("H2"))'],...
        '30 if (TC<30) then rate = -rate * (TC-10)*(TC+10-2*30)/(30-10)^2',...
        '40 if (TC>=30) then rate = -rate * (TC-100)*(TC+100-2*30)/(30-100)^2',...
        '50 if (-LA("H+")<7) then rate = -rate * (-LA("H+")-1)*(-LA("H+")+1-2*7)/(7-1)^2',...
        '60 if (-LA("H+")>=7) then rate = -rate * (-LA("H+")-10)*(-LA("H+")+10-2*7.)/(7-10)^2',...
        '50 if (-LA("H+")>=10) then rate = 0',...
        '60 if (-LA("H+")<=1) then rate = 0',...
        '70 if (TC<=10) then rate = 0',...
        '80 if (TC>=100) then rate = 0',...
        '90 if (EQUI("Goethite")<1e-8) the rate = 0',...
        '80 put(rate,4) ',...
        '90 moles = rate* TIME',...
        '200 SAVE moles',...
        '-end',...
        'Biomass_MET',... %MET Biomass growth model
        '-start',...
        '20 rate = get(1)',...
        ['30 Y = ',num2str(Y_MET)],...
        ['40 b = ',num2str(b_MET/86400)],...
        '50 rate = Y*rate-b*M',...
        '60 moles = -rate * TIME',...
        ['70 N = (M-moles)*',num2str(MW_MET*1/m_MET)],...
        ['80 if (M-moles)<',num2str(Mmin_MET),' then moles = M-',num2str(Mmin_MET)],...
        ['90 if (N>=',num2str(Nmax_MET),') then moles = M-',num2str(Mmax_MET)],...
        '200 Save moles',...
        '-end',...
        'Biomass_SRB',... %SRB Biomass growth model
        '-start',...
        '20 rate = get(2)',...
        ['30 Y = ',num2str(Y_SRB)],...
        ['40 b = ',num2str(b_SRB/86400)],...
        '50 rate = Y*rate-b*M',...
        '60 moles = -rate * TIME',...
        ['70 N = (M-moles)*',num2str(MW_SRB*1/m_SRB)],...
        ['80 if (M-moles)<',num2str(Mmin_SRB),' then moles = M-',num2str(Mmin_SRB)],...
        ['90 if (N>=',num2str(Nmax_SRB),') then moles = M-',num2str(Mmax_SRB)],...
        '200 Save moles',...
        '-end',...
        'Biomass_ACE',... %ACE Biomass growth model
        '-start',...
        '20 rate = get(3)',...
        ['30 Y = ',num2str(Y_ACE)],...
        ['40 b = ',num2str(b_ACE/86400)],...
        '50 rate = Y*rate-b*M',...
        '60 moles = -rate * TIME',...
        ['70 N = (M-moles)*',num2str(MW_ACE*1/m_ACE)],...
        ['80 if (M-moles)<',num2str(Mmin_ACE),' then moles = M-',num2str(Mmin_ACE)],...
        ['90 if (N>=',num2str(Nmax_ACE),') then moles = M-',num2str(Mmax_ACE)],...
        '200 Save moles',...
        '-end',...
        'Biomass_FRB',... %FRB Biomass growth model
        '-start',...
        '20 rate = get(4)',...
        ['30 Y = ',num2str(Y_FRB)],...
        ['40 b = ',num2str(b_FRB/86400)],...
        '50 rate = Y*rate-b*M',...
        '60 moles = -rate * TIME',...
        ['70 N = (M-moles)*',num2str(MW_FRB*1/m_FRB)],...
        ['80 if (M-moles)<',num2str(Mmin_FRB),' then moles = M-',num2str(Mmin_FRB)],...
        ['90 if (N>=',num2str(Nmax_FRB),') then moles = M-',num2str(Mmax_FRB)],...
        '200 Save moles',...
        '-end',...
        'END',...
        'SOLUTION 1',...
        ['-pressure ',num2str(pressure(i))],...
        ['-temp ', num2str(temp(i)-273.15)],...
        ['pH ',num2str(pH(i)),' charge'],...
        ['units ',Units],...
        ['K ',num2str(K(i))],...
        ['Na ',num2str(Na(i))],...
        ['Mg ',num2str(max(Mg(i),1e-9))],...
        ['Ca ',num2str(Ca(i))],...
        ['Cl ',num2str(Cl(i))],...
        ['Carbonate(4) ',num2str(C4(i))],...
        ['Sulfate(6) ',num2str(S6(i))],...
        ['Sulfide(-2) ',num2str(max(S2(i),1e-9))],...
        ['Fe_tri ',num2str(Fe3(i))],...
        ['Fe_di ',num2str(Fe2(i))],...
        ['Si ',num2str(Si(i))],...
        ['Acetate ',num2str(Acetate(i))],...
        ['-water ',num2str(mass_H2O_Profile(i)/mass_H2O_Profile(i))],...
        'END',...
        'Gas_Phase 1',...
        ['-pressure ',num2str(pressure(i))],...
        ['-temp ', num2str(temp(i)-273.15)],...
        '-fixed_volume',...
        ['-volume ',num2str(Vg(i)./mass_H2O_Profile(i))],...
        ['H2(g) ',num2str(pH2(i))],...
        ['redoxCarbonateO2(g) ',num2str(pCO2(i))],...
        ['redoxCH4(g) ',num2str(pCH4(i))],...
        ['redoxH2S(g) ',num2str(pH2S(i))],...
        ['N2(g) ',num2str(pN2(i))],...
        'Gas_Phase_Modify 1',...
        '-type 1',...
        ['-total_p ',num2str(pressure(i))],...
        ['-volume ',num2str(Vg(i)./mass_H2O_Profile(i))],...
        '-component H2(g)',...
        ['-moles ',num2str(mol_H2_Profile(i)./mass_H2O_Profile(i))],...
        '-component redoxCH4(g)',...
        ['-moles ',num2str(mol_CH4_Profile(i)./mass_H2O_Profile(i))],...
        '-component redoxCarbonateO2(g)',...
        ['-moles ',num2str(mol_CO2_Profile(i)./mass_H2O_Profile(i))],...
        '-component redoxH2S(g)',...
        ['-moles ',num2str(mol_H2S_Profile(i)./mass_H2O_Profile(i))],...
        '-component N2(g)',...
        ['-moles ',num2str(mol_N2_Profile(i)./mass_H2O_Profile(i))],...
        'END',...
        'INCREMENTAL_REACTIONS true',...
        'KINETICS 1',...
        'Biomass_SRB',...
        '-formula H 0',...
        ['-M0 ',num2str(min(SRB_Biomass(i)./mass_H2O_Profile(i),Mmax_SRB))],...
        'Biomass_MET',...
        '-formula H 0',...
        ['-M0 ',num2str(min(MET_Biomass(i)./mass_H2O_Profile(i),Mmax_MET))],...
        'Biomass_ACE',...
        '-formula H 0',...
        ['-M0 ',num2str(min(ACE_Biomass(i)./mass_H2O_Profile(i),Mmax_ACE))],...
        'Biomass_FRB',...
        '-formula H 0',...
        ['-M0 ',num2str(min(FRB_Biomass(i)./mass_H2O_Profile(i),Mmax_FRB))],...
        'MET',...
        ['-M ',num2str(mol_H2_Profile(i)./mass_H2O_Profile(i)),' moles'],...
        '-formula HCarbonateO3 -0.25 H2 -1 H+ -0.25 MethaneH4 0.25 H2O 0.75',... % Should be modified
        'SRB',...
        ['-M ',num2str(mol_H2_Profile(i)./mass_H2O_Profile(i)),' moles'],...
        '-formula SulfateO4 -0.25 H2 -1 H+ -0.25 HSulfide 0.25 H2O 1',... % Should be modified
        'ACE',...
        ['-M ',num2str(mol_H2_Profile(i)./mass_H2O_Profile(i)),' moles'],...
        '-formula HCarbonateO3 -0.5 H2 -1 H+ -0.25 Acetate 0.25 H2O 1',... % Should be modified
        'FRB',...
        ['-M ',num2str(mol_H2_Profile(i)./mass_H2O_Profile(i)),' moles'],...
        '-formula  Fe_tri -1 Fe_di +1',... % Should be modified
        ['-step ',num2str(tot_time),' in ',num2str(steps),' steps'],...
        '-bad_step_max 800',...
        'END',...
        'EQUILIBRIUM_PHASES 1',...
        ['redoxCalcite 0 ',num2str(Calcite_i(i)/mass_H2O_Profile(i))],...
        ['redoxDolomite 0 ',num2str(Dolomite_i(i)/mass_H2O_Profile(i))],...
        ['redoxAnhydrite 0 ',num2str(Anhydrite_i(i)/mass_H2O_Profile(i))],...
        ['Quartz 0 ',num2str(Quartz_i(i)/mass_H2O_Profile(i))],...
        ['redoxGoethite 0 ',num2str(Goethite_i(i)/mass_H2O_Profile(i))],...
        ['redoxPyrite   0 ',num2str(Pyrite_i(i)/mass_H2O_Profile(i))],...
        ['Brucite 0  ',num2str(Brucite_i(i)/mass_H2O_Profile(i))],...
        ['Portlandite 0  ',num2str(Portlandite_i(i)/mass_H2O_Profile(i))],...
        ['redoxGypsum 0  ',num2str(Gypsum_i(i)/mass_H2O_Profile(i))],...
        'END',...
        'USE solution 1',...
        'USE kinetics 1',...
        'USE EQUILIBRIUM_PHASES 1',...
        'USE gas_phase 1',...
        'USER_PUNCH',...
        '-headings MET_RATE ACE_RATE SRB_RATE TDS CO3-2 HCO3- TOT_CO2 Dissolved_CO2 Z_Factor act("Ca+2") act("CO3-2") act(CaHCO3+) Ca+2 CaHCO3+',...
        '-start',...
        '20 rate1 = get(1)',...
        '30 Punch rate1',...
        '40 rate2 = get(3)',...
        '50 Punch rate2',...
        '60 rate3 = get(2)',...
        '70 Punch rate3',...
        '80 Punch (RHO - TOT("water")/SOLN_VOL)*1e3',...
        '90 Punch MOL("CarbonateO3-2")',...
        '91 Punch MOL("HCarbonateO3-")',...
        '92 Punch GAS("redoxCarbonateO2(g)") + MOL("CarbonateO2")',...
        '93 Punch TOT("Carbonate(4)") - MOL("CarbonateO3-2") - MOL("HCarbonateO3-") - mol("CaHCarbonateO3+")',...
        '94 Punch GAS_P*GAS_VM/TK/0.082057366080960',...
        '95 Punch act("Ca+2")',...
        '96 Punch act("CarbonateO3-2")',...
        '97 Punch act("CaHCarbonateO3+")',...
        '98 Punch mol("Ca+2")',...
        '99 Punch mol("CaHCarbonateO3+")',...
        '-end',...
        'SELECTED_OUTPUT',...
        '#-high_precision',...
        '-sim false',...
        '-step true',...
        '-soln false',...
        '-pH true',...
        '-molalities H2 N2 CarbonateO2 MethaneH4 H2Sulfide',  ...
        '-state false',  ...
        '-water true',...
        '-time true',  ...
        '-gases H2(g) redoxCarbonateO2(g) redoxCH4(g) redoxH2S(g) N2(g)',...
        '-distance false',...
        '-equilibrium_phases redoxCalcite redoxAnhydrite redoxGypsum redoxDolomite redoxGoethite redoxPyrite Brucite Portlandite Quartz',...
        '-kinetic_reactants Biomass_SRB Biomass_MET Biomass_ACE Biomass_FRB',...
        '-total Carbonate(4) Sulfate(6) Ca Mg Fe_di Fe_tri K Na Cl Acetate Sulfide(-2) Si',...
        '-saturation_indices redoxCalcite Brucite Portlandite redoxAnhydrite redoxDolomite Quartz redoxH2S(g)',...
        'END'};
    IPCstring = sprintf('%s\n', IPCstringCell{:});
    Strings{i,1} = IPCstring;
end
%states{t,1}.Strings = Strings;
%save('Stings.mat', 'Strings');
%save('states.mat', 'states');

parfor i = 1:G.cells.num
    try
        % Main Code
        iphreeqc = actxserver('IPhreeqcCOM.Object');
        iphreeqc.LoadDatabase('C:\Users\as2220\OneDrive - Heriot-Watt University\PhD Project\Codes\mrst-2023b\modules\compositional\examples\Water_Gas_Simulations\database\PHREEQC_Modified.dat');
        iphreeqc.RunString(Strings{i,1});
        OUTPUT{i,1} = iphreeqc.GetSelectedOutputArray;
    catch ME
        % Handle the error (log it, store it, etc.)
        fprintf('Error in iteration %d: %s\n', i, ME.message);
        % Optionally store the error message in the output cell array
        OUTPUT{i,1} = sprintf('Error: %s', ME.message);
    end
end
MET_Rate   = zeros(G.cells.num,1);
ACE_Rate   = zeros(G.cells.num,1);
SRB_Rate   = zeros(G.cells.num,1);
D_Calcite  = zeros(G.cells.num,1);
D_Dolomite = zeros(G.cells.num,1);
D_Brucite = zeros(G.cells.num,1);
D_Portlandite = zeros(G.cells.num,1);
D_Gypsum = zeros(G.cells.num,1);
D_Quartz = zeros(G.cells.num,1);
D_Anhydrite = zeros(G.cells.num,1);
D_Pyrite = zeros(G.cells.num,1);
D_Goethite = zeros(G.cells.num,1);
for i=1:G.cells.num
    output = OUTPUT{i,1};
    %states{t,1}.PHREEQC {i,1} = output;
    a = 0;
    b = 0;
    c = 0;
    for j=2:steps+1
        if j == 2
            a = output{j,64} .* output{j,1};
            b = output{j,65} .* output{j,1};
            c = output{j,66} .* output{j,1};
        else
            a = a + output{j,64} .* (output{j,1}-output{j-1,1});
            b = b + output{j,65} .* (output{j,1}-output{j-1,1});
            c = c + output{j,66} .* (output{j,1}-output{j-1,1});
        end
    end
    MET_Rate(i)     = a./output{steps+1,1}*1000*86400; %mmol/day
    ACE_Rate(i)     = b./output{steps+1,1}*1000*86400; %mmol/day
    SRB_Rate(i)     = c./output{steps+1,1}*1000*86400; %mmol/day
    d_calcite = 0;
    d_dolomite = 0;
    d_Brucite = 0;
    d_Portlandite = 0;
    d_Gypsum = 0;
    d_Quartz = 0;
    d_Anhydrite = 0;
    d_Pyrite = 0;
    d_Goethite = 0;
    for jj = 2:steps+1
        d_calcite = d_calcite + output{jj,24}*mass_H2O_Profile(i);
        d_dolomite = d_dolomite + output{jj,30}*mass_H2O_Profile(i);
        d_Brucite = d_Brucite + output{jj,36}*mass_H2O_Profile(i);
        d_Portlandite = d_Portlandite + output{jj,38}*mass_H2O_Profile(i);
        d_Gypsum = d_Gypsum + output{jj,28}*mass_H2O_Profile(i);
        d_Quartz = d_Quartz + output{jj,40}*mass_H2O_Profile(i);
        d_Anhydrite = d_Anhydrite + output{jj,26}*mass_H2O_Profile(i);
        d_Pyrite = d_Pyrite + output{jj,34}*mass_H2O_Profile(i);
        d_Goethite = d_Goethite + output{jj,32}*mass_H2O_Profile(i);
    end
    D_Calcite(i)     = d_calcite;
    D_Dolomite(i)    = d_dolomite;
    D_Brucite(i)     = d_Brucite;
    D_Portlandite(i) = d_Portlandite;
    D_Gypsum(i)      = d_Gypsum;
    D_Quartz(i)      = d_Quartz;
    D_Anhydrite(i)   = d_Anhydrite;
    D_Pyrite(i)      = d_Pyrite;
    D_Goethite(i)    = d_Goethite;
    Calcite(i)       = Calcite_i(i)   + d_calcite;
    Dolomite(i)      = Dolomite_i(i)  + d_dolomite;
    Anhydrite(i)     = Anhydrite(i)   + d_Anhydrite;
    Quartz(i)        = Quartz(i)      + d_Quartz;
    Goethite(i)      = Goethite(i)    + d_Goethite;
    Brucite(i)       = Brucite(i)     + d_Brucite;
    Portlandite(i)  = Portlandite(i)  + d_Portlandite;
    Pyrite(i)       = Pyrite(i)       + d_Pyrite;
    Gypsum(i)       = Gypsum(i)       + d_Gypsum;
    pH(i)             = output{end,3};
    Ca(i)             = output{end,8};
    Cl(i)             = output{end,14};
    Na(i)             = output{end,13};
    Mg(i)             = output{end,9};
    K(i)              = output{end,12};
    %C4(i)             = output{end,68}+output{end,69}; %output{end,6}; %
    C4(i)             = output{end,6}-output{end,20}; %New amendment
    S6(i)             = output{end,7};
    S2(i)             = output{end,16};
    Fe3(i)             = output{end,11};
    Fe2(i)             = output{end,10};
    Si(i)              = output{end,17}; %Si
    Acetate(i)         = output{end,15}; %Acetate
    pressure(i)        = output{end,48} * 101325;
    Water(i,1)         = output{end,5}*mass_H2O_Profile(i);
    xH2_MRST            = states{t,1}.x(i,2)/states{t,1}.x(i,1)/0.018015268; % mol H2/kgw
    xCH4_MRST           = states{t,1}.x(i,4)/states{t,1}.x(i,1)/0.018015268; % mol CH4/kgw
    xCO2_MRST           = states{t,1}.x(i,3)/states{t,1}.x(i,1)/0.018015268; % mol CO2/kgw
    CH4moles            = (output{end,21}-xCH4_MRST)*Water(i,1);
    H2moles             = (output{end,18}-xH2_MRST)*Water(i,1);
    CO2moles            = (output{end,71}-xCO2_MRST)*Water(i,1);
    Z_factor            = (output{end,72}+states{t,1}.Z_V(i))./2;
    pressure(i)         = 101325*Z_factor*(CO2moles+CH4moles+H2moles+output{end,49}*mass_H2O_Profile(i))*R*temp(i)/output{end,50}/mass_H2O_Profile(i);
    if index(i)
        pressure(i)     = states{t,1}.pressure(i);
    end
    SRB_Biomass (i)      = output{end,56}*mass_H2O_Profile(i);
    MET_Biomass(i)      = output{end,58}*mass_H2O_Profile(i);
    ACE_Biomass(i)      = output{end,60}*mass_H2O_Profile(i);
    FRB_Biomass(i)      = output{end,62}*mass_H2O_Profile(i);
    mass_H2O_Profile(i) = output{end,5}*mass_H2O_Profile(i);
    H2(i,1)    = output{end,51}*mass_H2O_Profile(i) + output{end,18}*Water(i,1);
    CO2(i,1)   = output{end,52}*mass_H2O_Profile(i) + output{end,20}*Water(i,1);%output{end,70}*mass_H2O_Profile(i);%
    CH4(i,1)   = output{end,53}*mass_H2O_Profile(i) + output{end,21}*Water(i,1);
    H2S(i,1)   = output{end,54}*mass_H2O_Profile(i) ;%+ output{end,22}*Water(i,1);
    N2(i,1)    = output{end,55}*mass_H2O_Profile(i) + output{end,19}*Water(i,1);
end
% delete(gcp); % Close the parallel pool
if t==1
    states{t,1}.Mineralogy.Delta_Calcite     = D_Calcite;
    states{t,1}.Mineralogy.Delta_Dolomite    = D_Dolomite;
    states{t,1}.Mineralogy.Delta_Anhydrite   = D_Anhydrite;
    states{t,1}.Mineralogy.Delta_Pyrite      = D_Pyrite;
    states{t,1}.Mineralogy.Delta_Portlandite = D_Portlandite;
    states{t,1}.Mineralogy.Delta_Gypsum      = D_Gypsum;
    states{t,1}.Mineralogy.Delta_Quartz      = D_Quartz;
    states{t,1}.Mineralogy.Delta_Goethite    = D_Goethite;
    states{t,1}.Mineralogy.Delta_Brucite     = D_Brucite;
else
    states{t,1}.Mineralogy.Delta_Calcite     = D_Calcite + states{t-1,1}.Mineralogy.Delta_Calcite;
    states{t,1}.Mineralogy.Delta_Dolomite    = D_Dolomite + states{t-1,1}.Mineralogy.Delta_Dolomite;
    states{t,1}.Mineralogy.Delta_Anhydrite   = D_Anhydrite + states{t-1,1}.Mineralogy.Delta_Anhydrite;
    states{t,1}.Mineralogy.Delta_Pyrite      = D_Pyrite + states{t-1,1}.Mineralogy.Delta_Pyrite;
    states{t,1}.Mineralogy.Delta_Portlandite = D_Portlandite + states{t-1,1}.Mineralogy.Delta_Portlandite;
    states{t,1}.Mineralogy.Delta_Gypsum      = D_Gypsum + states{t-1,1}.Mineralogy.Delta_Gypsum;
    states{t,1}.Mineralogy.Delta_Quartz      = D_Quartz + states{t-1,1}.Mineralogy.Delta_Quartz;
    states{t,1}.Mineralogy.Delta_Goethite    = D_Goethite + states{t-1,1}.Mineralogy.Delta_Goethite;
    states{t,1}.Mineralogy.Delta_Brucite     = D_Brucite + states{t-1,1}.Mineralogy.Delta_Brucite;
end
states{t,1}.Mineralogy.Calcite      = Calcite;
states{t,1}.Mineralogy.Dolomite     = Dolomite;
states{t,1}.Mineralogy.Anhydrite    = Anhydrite;
states{t,1}.Mineralogy.Quartz       = Quartz;
states{t,1}.Mineralogy.Goethite     = Goethite;
states{t,1}.Mineralogy.Brucite      = Brucite;
states{t,1}.Mineralogy.Portlandite  = Portlandite;
states{t,1}.Mineralogy.Pyrite       = Pyrite;
states{t,1}.Mineralogy.Gypsum       = Gypsum;
states{t,1}.Solution.pH             = pH;
states{t,1}.Solution.Ca             = Ca;
states{t,1}.Solution.Cl             = Cl;
states{t,1}.Solution.Na             = Na;
states{t,1}.Solution.Mg             = Mg;
states{t,1}.Solution.K              = K;
states{t,1}.Solution.C4             = C4;
states{t,1}.Solution.S6             = S6;
states{t,1}.Solution.S2             = S2;
states{t,1}.Solution.Fe3            = Fe3;
states{t,1}.Solution.Fe2            = Fe2;
states{t,1}.Solution.Si             = Si; %Si
states{t,1}.Solution.Acetate        = Acetate; %Acetate
states{t,1}.Solution.Water          = Water;
states{t,1}.Solution.MET_Rate       = MET_Rate;
states{t,1}.Solution.ACE_Rate       = ACE_Rate;
states{t,1}.Solution.SRB_Rate       = SRB_Rate;


states{t,1}.pressure               = pressure;
%states{t,1}.pressure(i) = states{t,1}.pressure(i) + deltaP2*barsa; %bar
states{t,1}.Solution.SRB_Biomass      = SRB_Biomass;
states{t,1}.Solution.MET_Biomass      = MET_Biomass;
states{t,1}.Solution.ACE_Biomass      = ACE_Biomass;
states{t,1}.Solution.FRB_Biomass      = FRB_Biomass;
%% Check Mass (mole) Balance for each element
FinalH  = Water/0.018015268*2 + H2*2 + H2S*2 + CH4*4 + ...
    Gypsum*4 + Brucite*2 + Portlandite*2 + Goethite*1;
states{t,1}.moleConservation.H = [InitialH';...
    FinalH';...
    abs(InitialH'-FinalH')./InitialH'.*100];
FinalO  = Water./0.018015268*1 + CO2*2 + Calcite*3 + Dolomite*6 + Anhydrite*4 + ...
    Gypsum*6 + Brucite*2 + Portlandite*2 + Goethite*2;
states{t,1}.moleConservation.O = [InitialO';...
    FinalO';...
    abs(InitialO'-FinalO')./InitialO'.*100'];
FinalC  = CO2*1 + CH4*1 + Calcite*1 + Dolomite*2 + C4.*Water;
states{t,1}.moleConservation.C = [InitialC';...
    FinalC';...
    abs(InitialC'-FinalC')./InitialC'*100'];
FinalS  = H2S*1 + Anhydrite*1 + Gypsum*1 + Pyrite*2 + S6.*Water + S2.*Water;
states{t,1}.moleConservation.S = [InitialS';...
    FinalS';...
    abs(InitialS'-FinalS')./InitialS'*100'];
FinalN  = N2*2;
states{t,1}.moleConservation.N = [InitialN';...
    FinalN';...
    abs(InitialN'-FinalN')./InitialN'*100'];
FinalCa = Calcite*1 + Dolomite*1 + Anhydrite*1 + Gypsum*1 + Portlandite*1+...
    Ca.*Water;
states{t,1}.moleConservation.Ca = [InitialCa';...
    FinalCa';...
    abs(InitialCa'-FinalCa')./InitialCa'*100'];
FinalMg = Dolomite*1 + Mg.*Water + Brucite*1;
states{t,1}.moleConservation.Mg = [InitialMg';...
    FinalMg';...
    abs(InitialMg'-FinalMg')./InitialMg'*100'];
FinalFe = Pyrite*1 + Goethite*1 + Fe2.*Water + Fe3.*Water;
states{t,1}.moleConservation.Fe = [InitialFe';...
    FinalFe';...
    abs(InitialFe'-FinalFe')./InitialFe'.*100'];
%% Calculate mass and convert to Zi
states{t,1}.FlowProps.ComponentTotalMass{1,1} = Water + states{t,1}.s(:,2).*model.G.cells.volumes.*model.rock.poro.*rho_molar_Gas.*Y(:,1).*0.018015268;
states{t,1}.FlowProps.ComponentTotalMass{2,1} = H2*0.00201588; % kg mass of component number 2 ==> H2
states{t,1}.FlowProps.ComponentTotalMass{3,1} = CO2*0.0440098; % kg mass of component number 3 ==> CO2
states{t,1}.FlowProps.ComponentTotalMass{4,1} = CH4*0.0160428; % kg mass of component number 4 ==> CH4
states{t,1}.FlowProps.ComponentTotalMass{5,1} = H2S*0.03408088; % kg mass of component number 5 ==> H2S
states{t,1}.FlowProps.ComponentTotalMass{6,1} = N2*0.02801348; % kg mass of component number 6 ==> N2
disp('End of Bio-Geochemical Reactions!')
disp('Updating Variables for the Next Time Step...')
[model,states] = DeltaPorPerm(model,states,t); % Updating Porosity
states = mass2Zi(states,model,t);
disp('Variables Are Updated!')
states{t,1}.IonMole.Na = states{t,1}.s(:,1).*model.G.cells.volumes.*model.rock.poro.*rho_molar_Water.*X(:,1).*0.018015268.*states{t,1}.Solution.Na;
states{t,1}.IonMole.Ca = states{t,1}.s(:,1).*model.G.cells.volumes.*model.rock.poro.*rho_molar_Water.*X(:,1).*0.018015268.*states{t,1}.Solution.Ca;
states{t,1}.IonMole.Mg = states{t,1}.s(:,1).*model.G.cells.volumes.*model.rock.poro.*rho_molar_Water.*X(:,1).*0.018015268.*states{t,1}.Solution.Mg;
states{t,1}.IonMole.Cl = states{t,1}.s(:,1).*model.G.cells.volumes.*model.rock.poro.*rho_molar_Water.*X(:,1).*0.018015268.*states{t,1}.Solution.Cl;
states{t,1}.IonMole.K  = states{t,1}.s(:,1).*model.G.cells.volumes.*model.rock.poro.*rho_molar_Water.*X(:,1).*0.018015268.*states{t,1}.Solution.K;
states{t,1}.IonMole.Fe2 = states{t,1}.s(:,1).*model.G.cells.volumes.*model.rock.poro.*rho_molar_Water.*X(:,1).*0.018015268.*states{t,1}.Solution.Fe2;
states{t,1}.IonMole.Fe3 = states{t,1}.s(:,1).*model.G.cells.volumes.*model.rock.poro.*rho_molar_Water.*X(:,1).*0.018015268.*states{t,1}.Solution.Fe3;
states{t,1}.IonMole.C4 = states{t,1}.s(:,1).*model.G.cells.volumes.*model.rock.poro.*rho_molar_Water.*X(:,1).*0.018015268.*states{t,1}.Solution.C4;
states{t,1}.IonMole.S6 = states{t,1}.s(:,1).*model.G.cells.volumes.*model.rock.poro.*rho_molar_Water.*X(:,1).*0.018015268.*states{t,1}.Solution.S6;
states{t,1}.IonMole.S2 = states{t,1}.s(:,1).*model.G.cells.volumes.*model.rock.poro.*rho_molar_Water.*X(:,1).*0.018015268.*states{t,1}.Solution.S2;
states{t,1}.IonMole.Si = states{t,1}.s(:,1).*model.G.cells.volumes.*model.rock.poro.*rho_molar_Water.*X(:,1).*0.018015268.*states{t,1}.Solution.Si;
states{t,1}.IonMole.Acetate = states{t,1}.s(:,1).*model.G.cells.volumes.*model.rock.poro.*rho_molar_Water.*X(:,1).*0.018015268.*states{t,1}.Solution.Acetate;


end

